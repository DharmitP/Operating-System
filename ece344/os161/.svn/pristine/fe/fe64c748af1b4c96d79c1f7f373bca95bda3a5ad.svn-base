#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <machine/pcb.h>
#include <machine/spl.h>
#include <machine/trapframe.h>
#include <kern/callno.h>
#include <syscall.h>
#include <uio.h>
#include <kern/unistd.h>
#include <thread.h>
#include <addrspace.h>

/*
 * System call handler.
 *
 * A pointer to the trapframe created during exception entry (in
 * exception.S) is passed in.
 *
 * The calling conventions for syscalls are as follows: Like ordinary
 * function calls, the first 4 32-bit arguments are passed in the 4
 * argument registers a0-a3. In addition, the system call number is
 * passed in the v0 register.
 *
 * On successful return, the return value is passed back in the v0
 * register, like an ordinary function call, and the a3 register is
 * also set to 0 to indicate success.
 *
 * On an error return, the error code is passed back in the v0
 * register, and the a3 register is set to 1 to indicate failure.
 * (Userlevel code takes care of storing the error code in errno and
 * returning the value -1 from the actual userlevel syscall function.
 * See src/lib/libc/syscalls.S and related files.)
 *
 * Upon syscall return the program counter stored in the trapframe
 * must be incremented by one instruction; otherwise the exception
 * return code will restart the "syscall" instruction and the system
 * call will repeat forever.
 *
 * Since none of the OS/161 system calls have more than 4 arguments,
 * there should be no need to fetch additional arguments from the
 * user-level stack.
 *
 * Watch out: if you make system calls that have 64-bit quantities as
 * arguments, they will get passed in pairs of registers, and not
 * necessarily in the way you expect. We recommend you don't do it.
 * (In fact, we recommend you don't use 64-bit quantities at all. See
 * arch/mips/include/types.h.)
 */

void
mips_syscall(struct trapframe *tf)
{
	int callno;
	int32_t retval;
	int err;

	assert(curspl==0);

	callno = tf->tf_v0;

	/*
	 * Initialize retval to 0. Many of the system calls don't
	 * really return a value, just 0 for success and -1 on
	 * error. Since retval is the value returned on success,
	 * initialize it to 0 by default; thus it's not necessary to
	 * deal with it except for calls that return other values, 
	 * like write.
	 */

	retval = 0;

	switch (callno) {
	    case SYS_reboot:
		err = sys_reboot(tf->tf_a0);
		break;

	    /* Add stuff here */
            case SYS_write:
                err = sys_write(tf->tf_a0, (void *) tf->tf_a1, (size_t) tf->tf_a2, &retval);
                break;
                
            case SYS_read:
                err = sys_read(tf->tf_a0, (void *) tf->tf_a1, (size_t) tf->tf_a2, &retval);
                break;
                
            case SYS_fork:
                err = sys_fork(tf, &retval);
                break;
                
            case SYS_getpid:
                err = 0;
                retval = sys_getpid();
                break;
 
	    default:
		kprintf("Unknown syscall %d\n", callno);
		err = ENOSYS;
		break;
	}


	if (err) {
		/*
		 * Return the error code. This gets converted at
		 * userlevel to a return value of -1 and the error
		 * code in errno.
		 */
		tf->tf_v0 = err;
		tf->tf_a3 = 1;      /* signal an error */
	}
	else {
		/* Success. */
		tf->tf_v0 = retval;
		tf->tf_a3 = 0;      /* signal no error */
	}
	
	/*
	 * Now, advance the program counter, to avoid restarting
	 * the syscall over and over again.
	 */
	
	tf->tf_epc += 4;

	/* Make sure the syscall code didn't forget to lower spl */
	assert(curspl==0);
}

void
md_forkentry(struct trapframe *tf, struct addrspace *child_addrspace)
{
	/*
     * This function is provided as a reminder. You need to write
     * both it and the code that calls it.
     *
     * Thus, you can trash it and do things another way if you prefer.
     */
    curthread->t_vmspace = child_addrspace;
    as_activate(child_addrspace);
    mips_usermode(&tf);

	//(void)tf;
}

int sys_write(int filehandle, const void *buf, size_t size, int* retval){
    int result = 0;
    char *kbuf;
    
    if (filehandle != STDOUT_FILENO && filehandle != STDERR_FILENO){
        return EBADF;
    }
    
    kbuf = kmalloc(sizeof(*buf)*size);
    result = copyin((const_userptr_t) buf, kbuf, size);
    
    //EFAULT
    if (result > 0)
        return EFAULT;
    
    int spl;
    spl = splhigh();
    
    unsigned i;
    for(i=0; i<size; i++){
        putch(kbuf[i]);
    }

    *retval = size;
    
    splx(spl);
    
    return 0;
}

int sys_read(int filehandle, void *buf, size_t size, int* retval){
    int result = 0;
    char *kbuf;
    
    if (filehandle != STDIN_FILENO && filehandle != STDERR_FILENO){
        return EBADF;
    }
    
    kbuf = kmalloc(sizeof(*buf)*size);
    
    unsigned i;
    for(i=0; i<size; i++){
        kbuf[i] = getch();
    }
    
    //null terminate string
    kbuf[size] = NULL;
    
    result = copyout(kbuf, buf, size);
     //EFAULT
    if (result > 0)
        return EFAULT;

    *retval = size;
    
    return 0;
}

int sys_getpid(){
    return curthread->pid;
}

pid_t sys_fork(struct trapframe *tf, int *retval){
    int err_code = 0; // 0 means success (no error)
    
    //Copy the trapframe to child's trapframe
    struct trapframe *child_tf = kmalloc(sizeof(struct trapframe));
    if(child_tf == NULL){ //if no memory allocated, return error ENOMEM
        return ENOMEM;
    }
    *child_tf = *tf;
    
    //update child trapframe
    child_tf->tf_v0 = 0;  // return 0 for child 
    child_tf->tf_a3 = 0;  // no error for syscall (success)
    child_tf->tf_epc += 4; // increment program counter for child so it skips over thread_fork()
    
    //Create a new address space, and copy parent's addrspace to child's
    int addr_copy_success;
    struct addrspace *child_addrspace;
    addr_copy_success = as_copy(curthread->t_vmspace, &child_addrspace); //return ENOMEM if fail
    if(addr_copy_success != 0){
        return ENOMEM;
    }
    
    //create a new child thread and fork
    struct thread *child_thread;
    int thread_fork_err_code;
    thread_fork_err_code = thread_fork("Ch_thread", 
		child_tf, child_addrspace, 
		md_forkentry,
		&child_thread);
    if(thread_fork_err_code != 0){
        return thread_fork_err_code;
    }
    
    *retval = child_thread->pid;
    
    return 0;
}
